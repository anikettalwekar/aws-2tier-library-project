pipeline {
  agent any

  environment {
    TF_IN_AUTOMATION = 'true'
  }

  parameters {
    booleanParam(name: 'APPLY', defaultValue: false, description: 'Run terraform apply after plan?')
  }

  stages {
    stage('Checkout') {
      steps {
        echo 'Fetching code from GitHub...'
        checkout scm
      }
    }

    stage('Terraform Init') {
      steps {
        dir('terraform-aws-infra') {
          withCredentials([usernamePassword(credentialsId: 'aws-creds',
                                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                                            passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
            sh 'terraform init -input=false'
          }
        }
      }
    }

    stage('Terraform Validate') {
      steps {
        dir('terraform-aws-infra') {
          sh 'terraform validate'
        }
      }
    }

    stage('Terraform Plan') {
      steps {
        dir('terraform-aws-infra') {
          withCredentials([usernamePassword(credentialsId: 'aws-creds',
                                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                                            passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
            sh 'terraform plan -out=tfplan -input=false'
          }
        }
      }
    }

    stage('Terraform Apply (Manual Approval)') {
      when {
        expression { return params.APPLY == true }
      }
      steps {
        input message: 'Apply Terraform changes?', ok: 'Apply Now'
        dir('terraform-aws-infra') {
          withCredentials([usernamePassword(credentialsId: 'aws-creds',
                                            usernameVariable: 'AWS_ACCESS_KEY_ID',
                                            passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
            sh 'terraform apply -input=false -auto-approve tfplan'
          }
        }
      }
    }
  }

  post {
    always {
      dir('terraform-aws-infra') {
        sh 'terraform output || true'
      }
    }
  }
}
